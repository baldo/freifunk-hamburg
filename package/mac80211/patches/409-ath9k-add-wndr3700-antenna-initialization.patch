--- a/drivers/net/wireless/ath/ath9k/init.c
+++ b/drivers/net/wireless/ath/ath9k/init.c
@@ -16,6 +16,7 @@
 
 #include <linux/slab.h>
 
+#include "linux/ath9k_platform.h"
 #include "ath9k.h"
 
 static char *dev_info = "ath9k";
@@ -574,6 +575,8 @@ static int ath9k_init_softc(u16 devid, s
 	pdata = (struct ath9k_platform_data *) sc->dev->platform_data;
 	if (!pdata)
 		ah->ah_flags |= AH_USE_EEPROM;
+	else
+		sc->quirk_wndr3700 = pdata->quirk_wndr3700;
 
 	common = ath9k_hw_common(ah);
 	common->ops = &ath9k_common_ops;
@@ -704,6 +707,24 @@ void ath9k_set_hw_capab(struct ath_softc
 	SET_IEEE80211_PERM_ADDR(hw, common->macaddr);
 }
 
+#ifdef CONFIG_ATHEROS_AR71XX
+static void wndr3700_init_antenna(struct ath_hw *ah)
+{
+	ath9k_hw_cfg_output(ah, 6, AR_GPIO_OUTPUT_MUX_AS_OUTPUT);
+	ath9k_hw_cfg_output(ah, 7, AR_GPIO_OUTPUT_MUX_AS_OUTPUT);
+	ath9k_hw_cfg_output(ah, 8, AR_GPIO_OUTPUT_MUX_AS_OUTPUT);
+	ath9k_hw_cfg_output(ah, 9, AR_GPIO_OUTPUT_MUX_AS_OUTPUT);
+
+	/* select the first antenna group */
+	ath9k_hw_set_gpio(ah, 6, 0);
+	ath9k_hw_set_gpio(ah, 7, 1);
+	ath9k_hw_set_gpio(ah, 8, 0);
+	ath9k_hw_set_gpio(ah, 9, 1);
+}
+#else
+static inline void wndr3700_init_antenna(struct ath_hw *ah) {}
+#endif /* CONFIG_ATHEROS_AR71XX */
+
 int ath9k_init_device(u16 devid, struct ath_softc *sc, u16 subsysid,
 		    const struct ath_bus_ops *bus_ops)
 {
@@ -723,6 +744,9 @@ int ath9k_init_device(u16 devid, struct 
 	common = ath9k_hw_common(ah);
 	ath9k_set_hw_capab(sc, hw);
 
+	if (sc->quirk_wndr3700)
+		wndr3700_init_antenna(ah);
+
 	/* Initialize regulatory */
 	error = ath_regd_init(&common->regulatory, sc->hw->wiphy,
 			      ath9k_reg_notifier);
--- a/drivers/net/wireless/ath/ath9k/ath9k.h
+++ b/drivers/net/wireless/ath/ath9k/ath9k.h
@@ -635,6 +635,8 @@ struct ath_softc {
 
 	int beacon_interval;
 
+	bool quirk_wndr3700;
+
 #ifdef CONFIG_ATH9K_DEBUGFS
 	struct ath9k_debug debug;
 #endif
--- a/include/linux/ath9k_platform.h
+++ b/include/linux/ath9k_platform.h
@@ -24,6 +24,8 @@
 struct ath9k_platform_data {
 	u16 eeprom_data[ATH9K_PLAT_EEP_MAX_WORDS];
 	u8 *macaddr;
+
+	bool quirk_wndr3700;
 };
 
 #endif /* _LINUX_ATH9K_PLATFORM_H */
