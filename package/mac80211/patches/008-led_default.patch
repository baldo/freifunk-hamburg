--- a/config.mk
+++ b/config.mk
@@ -132,7 +132,7 @@ CONFIG_COMPAT_MAC80211_RC_DEFAULT=minstr
 CONFIG_MAC80211_RC_PID=y
 CONFIG_MAC80211_RC_MINSTREL=y
 CONFIG_MAC80211_RC_MINSTREL_HT=y
-CONFIG_MAC80211_LEDS=y
+# CONFIG_MAC80211_LEDS=y
 
 # enable mesh networking too
 CONFIG_MAC80211_MESH=y
@@ -233,7 +233,7 @@ CONFIG_B43_PCI_AUTOSELECT=y
 ifdef CONFIG_PCMCIA
 CONFIG_B43_PCMCIA=y
 endif #CONFIG_PCMCIA
-CONFIG_B43_LEDS=y
+# CONFIG_B43_LEDS=y
 CONFIG_B43_PHY_LP=y
 CONFIG_B43_NPHY=y
 # CONFIG_B43_FORCE_PIO=y
@@ -242,7 +242,7 @@ CONFIG_B43_NPHY=y
 CONFIG_B43LEGACY=m
 CONFIG_B43LEGACY_HWRNG=y
 CONFIG_B43LEGACY_PCI_AUTOSELECT=y
-CONFIG_B43LEGACY_LEDS=y
+# CONFIG_B43LEGACY_LEDS=y
 # CONFIG_B43LEGACY_DEBUG=y
 CONFIG_B43LEGACY_DMA=y
 CONFIG_B43LEGACY_PIO=y
@@ -529,7 +529,7 @@ endif
 
 # p54
 CONFIG_P54_COMMON=m
-CONFIG_P54_LEDS=y
+# CONFIG_P54_LEDS=y
 
 # Atheros
 CONFIG_ATH_COMMON=m
--- a/drivers/net/wireless/ath/ath9k/gpio.c
+++ b/drivers/net/wireless/ath/ath9k/gpio.c
@@ -54,6 +54,7 @@ static void ath_led_blink_work(struct wo
 		sc->sc_flags |= SC_OP_LED_ON;
 }
 
+#ifdef CONFIG_LEDS_CLASS
 static void ath_led_brightness(struct led_classdev *led_cdev,
 			       enum led_brightness brightness)
 {
@@ -90,10 +91,12 @@ static void ath_led_brightness(struct le
 		break;
 	}
 }
+#endif
 
 static int ath_register_led(struct ath_softc *sc, struct ath_led *led,
 			    char *trigger)
 {
+#ifdef CONFIG_LEDS_CLASS
 	int ret;
 
 	led->sc = sc;
@@ -108,14 +111,19 @@ static int ath_register_led(struct ath_s
 	else
 		led->registered = 1;
 	return ret;
+#else
+	return 0;
+#endif
 }
 
 static void ath_unregister_led(struct ath_led *led)
 {
+#ifdef CONFIG_LEDS_CLASS
 	if (led->registered) {
 		led_classdev_unregister(&led->led_cdev);
 		led->registered = 0;
 	}
+#endif
 }
 
 void ath_deinit_leds(struct ath_softc *sc)
--- a/drivers/net/wireless/ath/ath9k/htc_drv_main.c
+++ b/drivers/net/wireless/ath/ath9k/htc_drv_main.c
@@ -871,6 +871,7 @@ static void ath9k_led_brightness_work(st
 	}
 }
 
+#ifdef CONFIG_LEDS_CLASS
 static void ath9k_led_brightness(struct led_classdev *led_cdev,
 				 enum led_brightness brightness)
 {
@@ -882,6 +883,7 @@ static void ath9k_led_brightness(struct 
 		ieee80211_queue_delayed_work(priv->hw,
 					     &led->brightness_work, 0);
 }
+#endif
 
 static void ath9k_led_stop_brightness(struct ath9k_htc_priv *priv)
 {
@@ -894,6 +896,7 @@ static void ath9k_led_stop_brightness(st
 static int ath9k_register_led(struct ath9k_htc_priv *priv, struct ath_led *led,
 			      char *trigger)
 {
+#ifdef CONFIG_LEDS_CLASS
 	int ret;
 
 	led->priv = priv;
@@ -911,14 +914,19 @@ static int ath9k_register_led(struct ath
 	INIT_DELAYED_WORK(&led->brightness_work, ath9k_led_brightness_work);
 
 	return ret;
+#else
+	return 0;
+#endif
 }
 
 static void ath9k_unregister_led(struct ath_led *led)
 {
+#ifdef CONFIG_LEDS_CLASS
 	if (led->registered) {
 		led_classdev_unregister(&led->led_cdev);
 		led->registered = 0;
 	}
+#endif
 }
 
 void ath9k_deinit_leds(struct ath9k_htc_priv *priv)
