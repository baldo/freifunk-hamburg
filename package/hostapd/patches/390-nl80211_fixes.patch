--- a/src/drivers/driver_nl80211.c
+++ b/src/drivers/driver_nl80211.c
@@ -1135,7 +1135,6 @@ nla_put_failure:
 }
 
 
-#ifndef HOSTAPD
 struct wiphy_info_data {
 	int max_scan_ssids;
 	int ap_supported;
@@ -1247,7 +1246,6 @@ static int wpa_driver_nl80211_capa(struc
 
 	return 0;
 }
-#endif /* HOSTAPD */
 
 
 static int wpa_driver_nl80211_init_nl(struct wpa_driver_nl80211_data *drv,
@@ -1411,6 +1409,7 @@ static void * wpa_driver_nl80211_init(vo
 	drv->monitor_ifidx = -1;
 	drv->monitor_sock = -1;
 	drv->ioctl_sock = -1;
+	drv->nlmode = NL80211_IFTYPE_STATION;
 
 	if (wpa_driver_nl80211_init_nl(drv, ctx)) {
 		os_free(drv);
@@ -1530,32 +1529,32 @@ wpa_driver_nl80211_finish_drv_init(struc
 	drv->ifindex = if_nametoindex(bss->ifname);
 	drv->first_bss.ifindex = drv->ifindex;
 
-#ifndef HOSTAPD
-	if (wpa_driver_nl80211_set_mode(bss, IEEE80211_MODE_INFRA) < 0) {
-		wpa_printf(MSG_DEBUG, "nl80211: Could not configure driver to "
-			   "use managed mode");
-	}
+	if (drv->nlmode == NL80211_IFTYPE_STATION) {
+		if (wpa_driver_nl80211_set_mode(bss, IEEE80211_MODE_INFRA) < 0) {
+			wpa_printf(MSG_DEBUG, "nl80211: Could not configure driver to "
+				   "use managed mode");
+		}
 
-	if (linux_set_iface_flags(drv->ioctl_sock, bss->ifname, 1)) {
-		if (rfkill_is_blocked(drv->rfkill)) {
-			wpa_printf(MSG_DEBUG, "nl80211: Could not yet enable "
-				   "interface '%s' due to rfkill",
-				   bss->ifname);
-			drv->if_disabled = 1;
-			send_rfkill_event = 1;
-		} else {
-			wpa_printf(MSG_ERROR, "nl80211: Could not set "
-				   "interface '%s' UP", bss->ifname);
-			return -1;
+		if (linux_set_iface_flags(drv->ioctl_sock, bss->ifname, 1)) {
+			if (rfkill_is_blocked(drv->rfkill)) {
+				wpa_printf(MSG_DEBUG, "nl80211: Could not yet enable "
+					   "interface '%s' due to rfkill",
+					   bss->ifname);
+				drv->if_disabled = 1;
+				send_rfkill_event = 1;
+			} else {
+				wpa_printf(MSG_ERROR, "nl80211: Could not set "
+					   "interface '%s' UP", bss->ifname);
+				return -1;
+			}
 		}
-	}
 
-	if (wpa_driver_nl80211_capa(drv))
-		return -1;
+		if (wpa_driver_nl80211_capa(drv))
+			return -1;
 
-	netlink_send_oper_ifla(drv->netlink, drv->ifindex,
-			       1, IF_OPER_DORMANT);
-#endif /* HOSTAPD */
+		netlink_send_oper_ifla(drv->netlink, drv->ifindex,
+				       1, IF_OPER_DORMANT);
+	}
 
 	if (nl80211_register_action_frames(drv) < 0) {
 		wpa_printf(MSG_DEBUG, "nl80211: Failed to register Action "
@@ -2219,13 +2218,9 @@ static int wpa_driver_nl80211_set_key(co
 	 */
 	if (ret || !set_tx || alg == WPA_ALG_NONE)
 		return ret;
-#ifdef HOSTAPD
-	if (addr)
-		return ret;
-#else /* HOSTAPD */
+
 	if (drv->nlmode == NL80211_IFTYPE_AP && addr)
 		return ret;
-#endif /* HOSTAPD */
 
 	msg = nlmsg_alloc();
 	if (!msg)
@@ -3066,7 +3061,8 @@ static void nl80211_remove_iface(struct 
 
 #ifdef HOSTAPD
 	/* stop listening for EAPOL on this interface */
-	del_ifidx(drv, ifidx);
+	if (drv->nlmode == NL80211_IFTYPE_AP)
+		del_ifidx(drv, ifidx);
 #endif /* HOSTAPD */
 
 	msg = nlmsg_alloc();
@@ -3139,7 +3135,8 @@ static int nl80211_create_iface_once(str
 
 #ifdef HOSTAPD
 	/* start listening for EAPOL on this interface */
-	add_ifidx(drv, ifidx);
+	if (drv->nlmode == NL80211_IFTYPE_AP)
+		add_ifidx(drv, ifidx);
 #endif /* HOSTAPD */
 
 	if (addr && iftype != NL80211_IFTYPE_MONITOR &&
@@ -4842,6 +4839,7 @@ static void *i802_init(struct hostapd_da
 		return NULL;
 
 	drv = bss->drv;
+	drv->nlmode = NL80211_IFTYPE_AP;
 	if (linux_br_get(brname, params->ifname) == 0) {
 		wpa_printf(MSG_DEBUG, "nl80211: Interface %s is in bridge %s",
 			   params->ifname, brname);
